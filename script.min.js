function checkProtocol(e) { return e.startsWith("https://") || e.startsWith("http://") ? e : "https://" + e } function redirectToReverseProxy(e) { e = checkProtocol(e).replace(/(https?:\/\/)([^\/]+)/g, ((e, t, n) => `${t}${n.replace(/\./g, "-") + ".hlyi.eu.org"}`)), window.location = e } const urlParams = new URLSearchParams(window.location.search); function clickEffect(e) { const t = e.target, n = document.getElementById("keywordg"); "bingbar" != t.id && "search_bing" != t.id || n.children.length > 0 && (n.style.transform = "scaleY(1)", n.style.display = "block"), "ontouchstart" in window || document.getElementById("search_bing").focus(); const a = document.createElement("div"); a.className = "clickEffect", a.style.top = e.clientY + "px", a.style.left = e.clientX + "px", document.body.appendChild(a), a.addEventListener("animationend", (function () { a.parentElement.removeChild(a) })) } url = urlParams.get("url"), url && redirectToReverseProxy(url), "serviceWorker" in navigator && navigator.serviceWorker.register("service-worker.js"), document.addEventListener("click", clickEffect); const gid = document.getElementById("search_bing"), regex = /!(.*?)(?:\s|$)/; function bing(e) { const t = e[1].length, n = document.getElementById("keywordg"); 0 === t ? n.style.display = "none" : (n.style.transform = "scaleY(1)", n.style.display = "block"); let a = ""; for (let n = 0; n < t; n++)a += "<span>" + e[1][n] + "</span>"; n.innerHTML = a; for (let e = 0; e < n.children.length; e++) { n.children[e].onclick = function () { gidValue = this.innerHTML, gid.focus(), tobing() } } let o = !1; document.body.addEventListener("keydown", (function (e) { if ("Tab" === e.key) o = !0; else if (o && !isNaN(e.key)) { const t = parseInt(e.key) - 1; if (t >= 0 && t < n.children.length) { n.children[t].click() } } else { if (o && "ยง" === e.key) return "" !== gidValue && (redirectToReverseProxy(gidValue), gidValue = ""), !1; if ("Escape" === e.key || "Esc" === e.key) return "" !== gidValue && (window.location.href = checkProtocol(gidValue), gidValue = ""), !1 } }), !1), document.body.addEventListener("keyup", (function (e) { "Tab" === e.key && (o = !1) }), !1), document.body.addEventListener("click", (function (e) { const t = e.target; "bingbar" !== t.id && "search_bing" !== t.id && (n.style.transform = "scaleY(0)", n.style.display = "none") }), !1) } function isValidURL(e) { var t = document.createElement("a"); return t.href = e, 3 === t.host.split(".").length && t.host != window.location.host || !1 } function tobing() { if (gidValue.startsWith("https://") || gidValue.startsWith("http://")) return "" !== gidValue && (window.location.href = gidValue, gidValue = ""), !1; if (isValidURL("https://" + gidValue)) return "" !== gidValue && (window.location.href = "https://" + gidValue, gidValue = ""), !1; switch (match) { case "rp": case "proxy": return "" !== gidValue && (redirectToReverseProxy(gidValue), gidValue = ""), !1; case "zfin": case "z": return "" !== gidValue && (window.location.href = "https://zfin.org/search?category=&q=" + gidValue, gidValue = ""), !1; case "w": case "wiki": case "wikipedia": return "" !== gidValue && (window.location.href = "https://en.wikipedia.org/wiki/Special:Search?search=" + gidValue, gidValue = ""), !1; case "wt": case "wiktionary": case "dict": return "" !== gidValue && (window.location.href = "https://en.wiktionary.org/wiki/Special:Search?go=Define&search=" + gidValue, gidValue = ""), !1; case "gh": return "" !== gidValue && (window.location.href = "https://github.com/search?utf8=%E2%9C%93&q=" + gidValue, gidValue = ""), !1; case "cs": case "cons": return "" !== gidValue && (window.location.href = "https://consensus.app/results/?q=" + gidValue, gidValue = ""), !1; case "csyn": return "" !== gidValue && (window.location.href = "https://consensus.app/results/?q=" + gidValue + "&synthesize=on", gidValue = ""), !1; case "cc": case "ca": case "consensus": return "" !== gidValue && (window.location.href = "https://consensus.app/results/?q=" + gidValue + "&synthesize=on&copilot=on", gidValue = ""), !1; case "bing": case "copilot": case "cp": return "" !== gidValue && (window.location.href = "https://www.bing.com/chat?iscopilotedu=1&sendquery=1&q=" + gidValue, gidValue = ""), !1; case "c": return "" !== gidValue && (window.location.href = "https://chatgpt.com/?temporary-chat=true&q=" + gidValue, gidValue = ""), !1; case "gpt": case "chat": return "" !== gidValue && (window.location.href = "https://chatgpt.com/?model=gpt-4o&q=" + gidValue, gidValue = ""), !1; case "pc": case "chem": case "pubchem": return "" !== gidValue && (window.location.href = "https://pubchem.ncbi.nlm.nih.gov/#query=" + gidValue, gidValue = ""), !1; case "g": case "google": return "" !== gidValue && (window.location.href = "https://www.google.com/search?q=" + gidValue, gidValue = ""), !1; case "bi": case "bili": return "" !== gidValue && (window.location.href = "https://www.bilibili.com/search?keyword=" + gidValue, gidValue = ""), !1; case "b": case "bd": return "" !== gidValue && (window.location.href = "https://www.baidu.com/s?wd=" + gidValue, gidValue = ""), !1; case "s": case "gs": return "" !== gidValue && (window.location.href = "https://scholar.google.com/scholar?q=" + gidValue, gidValue = ""), !1; case "sougou": return "" !== gidValue && (window.location.href = "https://www.sogou.com/web?query=" + gidValue, gidValue = ""), !1; case "360": return "" !== gidValue && (window.location.href = "https://www.so.com/s?q=" + gidValue, gidValue = ""), !1; case "l": case "lofter": return "" !== gidValue && (window.location.href = "https://www.lofter.com/tag/" + gidValue, gidValue = ""), !1; case "hoyo": case "hoyolab": return "" !== gidValue && (window.location.href = "https://www.hoyolab.com/search?keyword=" + gidValue, gidValue = ""), !1; case "gene": return "" !== gidValue && (window.location.href = "https://www.alliancegenome.org/search?q=" + gidValue, gidValue = ""), !1; case "m": case "pm": case "pubmed": return "" !== gidValue && (window.location.href = "https://pubmed.ncbi.nlm.nih.gov/?term=" + gidValue, gidValue = ""), !1; case "mhy": case "ys": case "gsi": return "" !== gidValue && (window.location.href = "https://www.miyoushe.com/ys/search?keyword=" + gidValue, gidValue = ""), !1; case "hsr": case "sr": return "" !== gidValue && (window.location.href = "https://www.miyoushe.com/sr/search?keyword=" + gidValue, gidValue = ""), !1; case "anime": case "ani": return "" !== gidValue && (window.location.href = "https://www.qkan8.com/index.php/vod/search.html?wd=" + gidValue, gidValue = ""), !1; case "y": case "yt": case "youtube": return "" !== gidValue && (window.location.href = "https://www.youtube.com/results?search_query=" + gidValue, gidValue = ""), !1; case "d": case "ddg": return "" !== gidValue && (window.location.href = "https://duckduckgo.com/?q=" + gidValue, gidValue = ""), !1; case "a": case "amz": return "" !== gidValue && (window.location.href = "https://www.amazon.co.uk/s/?field-keywords=" + gidValue, gidValue = ""), !1; case "ebay": return "" !== gidValue && (window.location.href = "https://www.ebay.co.uk/sch/i.html?_nkw=" + gidValue, gidValue = ""), !1; case "app": return "" !== gidValue && (window.location.href = "https://appstorrent.ru/?do=search&subaction=search&story=" + gidValue, gidValue = ""), !1; case "e": case "ensembl": return "" !== gidValue && (window.location.href = "https://www.ensembl.org/Zebrafish/Search/Results?q=" + gidValue + ";facet_feature_type=;site=ensembl;facet_species=Zebrafish", gidValue = ""), !1; case "protocols": case "pt": case "p": return "" !== gidValue && (window.location.href = "https://www.protocols.io/search?q=" + gidValue, gidValue = ""), !1; case "gi": case "image": return "" !== gidValue && (window.location.href = "https://www.google.com/search?tbm=isch&q=" + gidValue, gidValue = ""), !1; case "f": case "fp": return "" !== gidValue && (window.location.href = "https://www.fpbase.org/search/?name__iexact=" + gidValue, gidValue = ""), !1; case "gt": case "t": case "translate": return "" !== gidValue && (window.location.href = "https://translate.google.com/#auto/en/" + gidValue, gidValue = ""), !1; default: return "" !== gidValue && (window.location.href = "https://www.bing.com/search?q=" + gidValue, gidValue = ""), !1 } } gid.addEventListener("input", (function () { if (!gid.value) return void (document.getElementById("keywordg").style.display = "none"); regex.exec(gid.value) ? (match = regex.exec(gid.value)[1], gidValue = gid.value.replace(regex, "")) : (match = void 0, gidValue = gid.value); const e = document.createElement("script"); e.type = "text/javascript", e.src = "https://suggestqueries.google.com/complete/search?q=" + gidValue + "&output=firefox&callback=bing"; const t = document.getElementsByTagName("script")[0]; t.parentNode.insertBefore(e, t) }), !1), gsap.registerPlugin(MotionPathPlugin); const container = document.getElementById("weathercontainer"), card = document.getElementById("card"); window.innerWidth <= 717 && card.classList.remove("nmbar"); const innerSVG = Snap("#inner"), outerSVG = Snap("#outer"), backSVG = Snap("#back"), weatherContainer1 = Snap.select("#layer1"), weatherContainer2 = Snap.select("#layer2"), weatherContainer3 = Snap.select("#layer3"); var innerRainHolder1 = weatherContainer1.group(), innerRainHolder2 = weatherContainer2.group(), innerRainHolder3 = weatherContainer3.group(); const innerLeafHolder = weatherContainer1.group(), innerSnowHolder = weatherContainer1.group(), innerLightningHolder = weatherContainer1.group(), leafMask = outerSVG.rect(), leaf = Snap.select("#leaf"), sun = Snap.select("#sun"), sunburst = Snap.select("#sunburst"), outerSplashHolder = outerSVG.group(), outerLeafHolder = outerSVG.group(), outerSnowHolder = outerSVG.group(); let currentWeather, lightningTimeout; outerLeafHolder.attr({ "clip-path": leafMask }); const sizes = { container: { width: 0, height: 0 }, card: { width: 0, height: 0 } }, clouds = [{ group: Snap.select("#cloud1") }, { group: Snap.select("#cloud2") }, { group: Snap.select("#cloud3") }], weather = [{ type: "snow" }, { type: "wind" }, { type: "rain" }, { type: "thunder" }, { type: "sun" }, { type: "cloud" }, { type: "haze" }, { type: "drizzle" }, { type: "clearwind" }], settings = { windSpeed: 2, rainCount: 0, leafCount: 0, snowCount: 0, cloudHeight: 100, cloudSpace: 30, cloudArch: 50, renewCheck: 10, splashBounce: 80 }; let tickCount = 0; const rain = [], leafs = [], snow = []; function init(e) { onResize(); for (let e = 0; e < clouds.length; e++)clouds[e].offset = Math.random() * sizes.card.width, drawCloud(clouds[e], e); gsap.set(sunburst.node, { opacity: 0 }), changeWeather(weather[e]) } function onResize() { sizes.container.width = container.offsetWidth, sizes.container.height = container.offsetHeight, sizes.card.width = card.offsetWidth, sizes.card.height = card.offsetHeight, innerSVG.attr({ width: sizes.card.width, height: sizes.card.height }), outerSVG.attr({ width: sizes.container.width, height: sizes.container.height }), backSVG.attr({ width: sizes.container.width, height: sizes.container.height }), gsap.set(sunburst.node, { transformOrigin: "50% 50%", x: sizes.container.width / 2, y: sizes.container.height / 2 }), gsap.fromTo(sunburst.node, 20, { rotation: 0 }, { rotation: 360, repeat: -1, ease: "power0.inOut" }), leafMask.attr({ x: 0, y: 0, width: sizes.container.width, height: sizes.container.height }) } function drawCloud(e, t) { const n = settings.cloudSpace * t + settings.cloudHeight, a = n + settings.cloudArch + Math.random() * settings.cloudArch, o = sizes.card.width, i = []; i.push("M" + [-o, 0].join(",")), i.push([o, 0].join(",")), i.push("Q" + [2 * o, n / 2].join(",")), i.push([o, n].join(",")), i.push("Q" + [.5 * o, a].join(",")), i.push([0, n].join(",")), i.push("Q" + [-.5 * o, a].join(",")), i.push([-o, n].join(",")), i.push("Q" + [-2 * o, n / 2].join(",")), i.push([-o, 0].join(",")); const r = i.join(" "); e.path || (e.path = e.group.path()), e.path.animate({ d: r }, 0) } function makeRain() { const e = 3 * Math.random(), t = "thunder" === currentWeather.type ? 35 : 14, n = Math.random() * (sizes.card.width - 40) + 20, a = this["innerRainHolder" + (3 - Math.floor(e))].path("M0,0 0," + t).attr({ fill: "none", stroke: "thunder" === currentWeather.type ? "#777" : "#0000ff", strokeWidth: e }); rain.push(a), gsap.fromTo(a.node, { x: n, y: 0 - t }, { duration: 1, delay: Math.random(), y: sizes.card.height, ease: "power2.in", onComplete: onRainEnd, onCompleteParams: [a, e, n, currentWeather.type] }) } function onRainEnd(e, t, n, a) { e.remove(), e = null; for (const e in rain) rain[e].paper || rain.splice(e, 1); rain.length < settings.rainCount && (makeRain(), t > 2 && makeSplash(n, a)) } function makeSplash(e, t) { const n = "thunder" === t ? 30 : 20, a = "thunder" === t ? 120 : 100, o = "thunder" === t ? .7 : .5, i = 0 - Math.random() * a, r = 80 * Math.random() - 40, s = []; s.push("M0,0"), s.push("Q" + r + "," + i), s.push(2 * r + ",80"); const d = outerSplashHolder.path(s.join(" ")).attr({ fill: "none", stroke: "thunder" === t ? "#777" : "#0000ff", strokeWidth: 1 }), c = Snap.path.getTotalLength(d), l = (sizes.container.width - sizes.card.width) / 2, u = (sizes.container.height - sizes.card.height) / 2 + sizes.card.height; d.node.style.strokeDasharray = n + " " + c, gsap.fromTo(d.node, { strokeWidth: 2, y: u, x: l + 20 + e, opacity: 1, strokeDashoffset: n }, { duration: o, strokeWidth: 0, strokeDashoffset: -c, opacity: 1, onComplete: onSplashComplete, onCompleteParams: [d], ease: "slow(0.4, 0.1, false)" }) } function onSplashComplete(e) { e.remove(), e = null } function makeLeaf() { const e = .5 + .5 * Math.random(); let t, n; const a = sizes.card.height / 2; let o, i = a + Math.random() * a, r = i - (Math.random() * (2 * a) - a); const s = ["#76993E", "#4A5E23", "#6D632F"], d = s[Math.floor(Math.random() * s.length)]; let c; if (e > .8) { n = leaf.clone().appendTo(outerLeafHolder).attr({ fill: d }), o = (sizes.container.width - sizes.card.width) / 2, i += 10, r += 10, c = (sizes.container.width + o) / 2, leafs.push(n); const t = [{ x: o, y: i }, { x: c, y: Math.random() * r + r / 3 }, { x: sizes.container.width + 50, y: r }]; gsap.fromTo(n.node, { rotation: 180 * Math.random(), x: o, y: a + Math.random() * a + 10, scale: e }, { duration: 2, rotation: 360 * Math.random(), motionPath: t, onComplete: onLeafEnd, onCompleteParams: [n], ease: "power0.in" }) } else { t = leaf.clone().appendTo(innerLeafHolder).attr({ fill: d }), o = -100, c = sizes.card.width / 2, leafs.push(t); const n = [{ x: o, y: i }, { x: c, y: Math.random() * r + r / 3 }, { x: sizes.card.width + 50, y: r }]; gsap.fromTo(t.node, { rotation: 180 * Math.random(), x: o, y: a + Math.random() * a, scale: e }, { duration: 2, rotation: 360 * Math.random(), motionPath: n, onComplete: onLeafEnd, onCompleteParams: [t], ease: "power0.in" }) } } function onLeafEnd(e) { e.remove(), e = null; for (const e in leafs) leafs[e].paper || leafs.splice(e, 1); leafs.length < settings.leafCount && makeLeaf() } function makeSnow() { const e = .5 + .5 * Math.random(); let t, n, a = 20 + Math.random() * (sizes.card.width - 40), o = -10; e > .8 ? (t = outerSnowHolder.circle(0, 0, 5).attr({ fill: "white" }), n = sizes.container.height + 10, o = (sizes.container.height - sizes.card.height) / 2 + settings.cloudHeight, a += (sizes.container.width - sizes.card.width) / 2) : (t = innerSnowHolder.circle(0, 0, 5).attr({ fill: "white" }), n = sizes.card.height + 10), snow.push(t), gsap.fromTo(t.node, { x: a, y: o }, { duration: 3 + 5 * Math.random(), y: n, onComplete: onSnowEnd, onCompleteParams: [t], ease: "power0.in" }), gsap.fromTo(t.node, { scale: 0 }, { duration: 1, scale: e, ease: "power1.inOut" }), gsap.to(t.node, { duration: 2, x: a + (150 * Math.random() - 75), repeat: -1, yoyo: !0, ease: "power1.inOut" }) } function onSnowEnd(e) { e.remove(), e = null; for (const e in snow) snow[e].paper || snow.splice(e, 1); snow.length < settings.snowCount && makeSnow() } function tick() { tickCount++; tickCount % settings.renewCheck && (rain.length < settings.rainCount && makeRain(), leafs.length < settings.leafCount && makeLeaf(), snow.length < settings.snowCount && makeSnow()); for (let e = 0; e < clouds.length; e++)"sun" === currentWeather.type || "clearwind" === currentWeather.type ? (clouds[e].offset > -1.5 * sizes.card.width && (clouds[e].offset += settings.windSpeed / (e + 1)), clouds[e].offset > 2.5 * sizes.card.width && (clouds[e].offset = -1.5 * sizes.card.width), clouds[e].group.transform("t" + clouds[e].offset + ",0")) : (clouds[e].offset += settings.windSpeed / (e + 1), clouds[e].offset > sizes.card.width && (clouds[e].offset = clouds[e].offset - sizes.card.width + 0), clouds[e].group.transform("t" + clouds[e].offset + ",0")); requestAnimationFrame(tick) } function reset() { for (let e = 0; e < weather.length; e++)container.classList.remove(weather[e].type) } function startLightningTimer() { lightningTimeout && clearTimeout(lightningTimeout), "thunder" === currentWeather.type && (lightningTimeout = setTimeout(lightning, 6e3 * Math.random())) } function lightning() { startLightningTimer(), gsap.fromTo(card, { y: -30 }, { duration: .75, y: 0, ease: "elastic" }); const e = 30 + Math.random() * (sizes.card.width - 60), t = [e + ",0"]; for (let n = 0; n < 20; n++) { const a = e + (20 * Math.random() - 10), o = sizes.card.height / 20 * (n + 1); t.push(a + "," + o) } let n = weatherContainer1.path("M" + t.join(" ")).attr({ fill: "none", stroke: "white", strokeWidth: 2 + Math.random() }); gsap.to(n.node, { duration: 1, opacity: 0, ease: "power4.out", onComplete: function () { n.remove(), n = null } }) } function changeWeather(e) { switch (e.data && (e = e.data), reset(), currentWeather = e, container.classList.add(e.type), e.type) { case "rain": gsap.to(settings, { duration: 3, rainCount: 20, ease: "power2.inOut" }); break; case "drizzle": gsap.to(settings, { duration: 3, rainCount: 5, ease: "power2.inOut" }); break; case "thunder": gsap.to(settings, { duration: 3, rainCount: 60, ease: "power2.inOut" }); break; default: gsap.to(settings, { duration: 1, rainCount: 0, ease: "power2.out" }) }switch (e.type) { case "wind": case "clearwind": gsap.to(settings, { duration: 3, leafCount: 5, ease: "power2.inOut" }); break; default: gsap.to(settings, { duration: 1, leafCount: 0, ease: "power2.out" }) }if ("snow" === e.type) gsap.to(settings, { duration: 3, snowCount: 40, ease: "power2.inOut" }); else gsap.to(settings, { duration: 1, snowCount: 0, ease: "power2.out" }); switch (e.type) { case "sun": case "clearwind": gsap.to(sun.node, { duration: 4, x: sizes.card.width / 2, y: sizes.card.height / 2, ease: "power2.inOut" }), window.innerWidth <= 717 ? gsap.to(sunburst.node, { duration: 4, scale: 1, opacity: .8, y: sizes.container.height / 2 - 80, ease: "power2.inOut" }) : gsap.to(sunburst.node, { duration: 4, scale: 1, opacity: .8, y: sizes.container.height / 2, ease: "power2.inOut" }); break; default: gsap.to(sun.node, { duration: 2, x: sizes.card.width / 2, y: -100, ease: "power2.inOut" }), gsap.to(sunburst.node, { duration: 2, scale: .4, opacity: 0, y: sizes.container.height / 2 - 50, ease: "power2.inOut" }) }startLightningTimer() } getWeather(); const xhr = new XMLHttpRequest; function getWeather() { const e = new XMLHttpRequest; e.open("get", "https://api.weatherapi.com/v1/forecast.json?key=483957d90eb54b5d88552513210506&q=auto:ip&days=1"), e.onreadystatechange = function () { if (4 === e.readyState) if (200 !== e.status) { handleJson(0, 0, 0, 0, 10, 0, { astro: { sunrise: "07:05 AM", sunset: "06:50 PM" }, day: { maxtemp_c: "NA", mintemp_c: "NA" } }) } else { const t = JSON.parse(e.responseText); handleJson(t.location.name, t.current.temp_c, t.current.condition.text, t.current.condition.code, t.current.wind_kph, t.current.humidity, t.forecast.forecastday[0]) } }, e.send() } function handleJson(e, t, n, a, o, i, r) { const s = r.astro.sunrise.split(":"); let d = parseFloat(s[1].split(" ")[0]), c = ""; c = d < 10 ? "0" + d.toString() : d.toString(); const l = r.astro.sunset.split(":"); let u = parseFloat(l[0]); 3 === l[1].indexOf("PM") && (u += 12); const h = parseFloat(l[1].split(" ")[0]); let g, p; settings.windSpeed = o / 10, 0 !== a ? (document.getElementById("city").innerHTML = e + " &#xe901", document.getElementById("detail").innerHTML = n, document.getElementById("temp").innerHTML = t + "ยฐC", document.getElementById("temprange").innerHTML = `<p>${r.day.mintemp_c}ยฐC to ${r.day.maxtemp_c}ยฐC</p><p> &#xe90b ${i}%</p><p>&#xe9d6 ${s[0]}:${c} to ${u}:${h}</p>`, 1066 === a || 1069 === a || 1114 === a || a > 1203 && a < 1238 ? (g = 0, p = "Snow") : a > 1272 && a < 1283 || 1087 === a ? (g = 3, p = "Thunder") : 1e3 === a && o < 29 ? (g = 4, p = "Clear", settings.windSpeed = 30) : 1e3 === a ? (g = 8, p = "Wind") : a > 1002 && a < 1010 && o < 29 ? (g = 5, p = "Cloud") : a > 1002 && a < 1010 ? (g = 1, p = "Wind") : 1030 === a || 1135 === a || 1147 === a ? (g = 6, p = "Fog") : 1072 === a || a > 1149 && a < 1172 ? (g = 7, p = "Drizzle") : (g = 2, p = "Rain"), document.getElementById("summary").innerHTML = p) : (g = 5, document.getElementById("temp").innerHTML = "Offline"), document.getElementById("time").innerHTML = (new Date).getHours() + ":" + checkTime((new Date).getMinutes()); setBackground(60 * parseFloat(s[0]) + d, 60 * u + h), init(g), window.addEventListener("resize", widgetResize), requestAnimationFrame(tick) } function printH(e, t, n) { document.getElementById("hitokoto").innerHTML = null == t ? e + "<p>โโใ" + n + "ใ</p>" : e + "<p>โโ" + t + "ใ" + n + "ใ</p>" } function widgetResize() { onResize(); for (let e = 0; e < clouds.length; e++)clouds[e].offset = Math.random() * sizes.card.width, drawCloud(clouds[e], e); changeWeather(currentWeather) } function checkTime(e) { return e < 10 && (e = "0" + e), e } function loadStyleString(e) { const t = document.createElement("style"); try { t.appendChild(document.createTextNode(e)) } catch (n) { t.styleSheet.cssText = e } document.getElementsByTagName("head")[0].appendChild(t) } function setBackground(e, t) { const n = 60 * (new Date).getHours() + (new Date).getMinutes(); let a, o, i, r, s = "0", d = "0"; s = urlParams.get("hres"), j = 1 == s ? "-4x-AnimeSharp.webp" : ".webp", d = urlParams.get("anime"), 1 == d ? (document.body.style.cursor = "url('/icon/cursor.gif'), auto", o = (t - e) / 14, a = (1440 - t) / 8, j = ".jpg", n <= e / 4 ? (i = "n4b", r = "#1e1518") : n > e / 4 && n <= e / 2 ? (i = "n5", r = "#0f2d41") : n > e / 2 && n <= 3 * e / 4 ? (i = "n6", r = "#37241d") : n > 3 * e / 4 && n <= e ? (i = "d0", r = "#101f48") : n > e && n <= e + o ? (i = "d1", r = "#43558d") : n > e + o && n <= e + 2 * o ? (i = "d1a", r = "#274625") : n > e + 2 * o && n <= e + 3 * o ? (i = "d2", r = "#39a3e2") : n > e + 3 * o && n <= e + 4 * o ? (i = "d3", r = "#776b5f") : n > e + 4 * o && n <= e + 5 * o ? (i = "d4", r = "#c3e6fa") : n > e + 5 * o && n <= e + 6 * o ? (i = "d4a", r = "#dae1f5") : n > e + 6 * o && n <= e + 7 * o ? (i = "d5", r = "#ffffff") : n > e + 7 * o && n <= e + 8 * o ? (i = "d5a", r = "#ffffff") : n > e + 8 * o && n <= e + 9 * o ? (i = "d5b", r = "#ffffff") : n > e + 9 * o && n <= e + 10 * o ? (i = "d5c", r = "#f3f4f6") : n > e + 10 * o && n <= e + 11 * o ? (i = "d5d", r = "#f5eee6") : n > e + 11 * o && n <= e + 12 * o ? (i = "d5e", r = "#f2eeeb") : n > e + 12 * o && n <= e + 13 * o ? (i = "d6", r = "#a8c5c1") : n > e + 13 * o && n <= t ? (i = "d7", r = "bB78473") : n > t && n <= t + a ? (i = "d8", r = "#dadad8") : n > t + a && n <= t + 2 * a ? (i = "n0", r = "#dbc3b9") : n > t + 2 * a && n <= t + 3 * a ? (i = "n1", r = "#e9cdb8") : n > t + 3 * a && n <= t + 4 * a ? (i = "n2", r = "#3c3c48") : n > t + 4 * a && n + 5 * a ? (i = "n3", r = "#030713") : n > t + 5 * a && n + 6 * a ? (i = "n3a", r = "#090818") : n > t + 6 * a && n + 7 * a ? (i = "n4", r = "#1f1f27") : (i = "n4a", r = "#1f1f27")) : (o = (t - e) / 8, a = (1440 - t) / 6, n <= e / 3 ? (i = "n5", r = "#755be3") : n > e / 3 && n <= 2 * e / 2 ? (i = "n6", r = "#2a6a9e") : n > 2 * e / 2 && n <= e ? (i = "d0", r = "#ed95d1") : n > e && n <= e + o / 2 ? (i = "d1", r = "#5e659b") : n > e + 1.5 * o && n <= e + 2.5 * o ? (i = "d2", r = "#3c82cc") : n > e + 2.5 * o && n <= e + 3.5 * o ? (i = "d3", r = "#95bdcc") : n > e + 3.5 * o && n <= e + 4.5 * o ? (i = "d4", r = "#364e3d") : n > e + 4.5 * o && n <= e + 5.5 * o ? (i = "d5", r = "#2fa0e6") : n > e + 5.5 * o && n <= e + 6.5 * o ? (i = "d6", r = "#6b8b4c") : n > e + 6.5 * o && n <= e + 7.5 * o ? (i = "d7", r = "#af5c18") : n > e + 7.5 * o && n <= t + a / 2 ? (i = "d8", r = "#da644f") : n > t + a / 2 && n <= t + 1.5 * a ? (i = "n0", r = "#b6bbf5") : n > t + 1.5 * a && n <= t + 2.5 * a ? (i = "n1", r = "#897ddc") : n > t + 2.5 * a && n <= t + 3.5 * a ? (i = "n2", r = "#3e7ee3") : n > t + 3.5 * a && n + 5 * a ? (i = "n3", r = "#36315a") : (i = "n4", r = "#3d3d88")), document.querySelector("meta[name=theme-color]").setAttribute("content", r), loadStyleString("#fill_screen{background:url('/background/" + i + j + "') no-repeat local center center/cover;}") } xhr.open("get", "https://international.v1.hitokoto.cn/?c=i"), xhr.onreadystatechange = function () { if (4 === xhr.readyState) { const e = JSON.parse(xhr.responseText); printH(e.hitokoto, e.from_who, e.from) } }, xhr.send(), setInterval((() => { document.getElementById("time").innerHTML = (new Date).getHours() + ":" + checkTime((new Date).getMinutes()) }), 6e4), setInterval((() => { getWeather() }), 9e5); const duration = .4; let isDay = !0; const scale = 30, toNightAnimation = gsap.timeline(); window.matchMedia && window.matchMedia("(prefers-color-scheme: dark)").matches ? document.getElementById("sunburst").style.display = "none" : toNightAnimation.pause(), toNightAnimation.to("#circle", { duration: .4, ease: "power4.in", scaleX: 30, scaleY: 30, x: 1, transformOrigin: "100% 50%" }, 0).set("#circle", { scaleX: -30 }, .4).to("#circle", { duration: .4, ease: "power4.out", scaleX: -1, scaleY: 1, x: 2 }, .4).fromTo(".filter", { filter: "brightness(100%)" }, { filter: "brightness(50%)", duration: .4 }, 0).to(".nmtext,.nmbar", { color: "white", duration: .8 }, 0).to(".nmbar", { background: "rgba(0,0,0,.3)", duration: .4 }, 0).fromTo(".nmbar", { boxShadow: "0 0 18px rgba(70, 70, 40, .255)" }, { boxShadow: "0 0 18px rgba(0, 0, 0, .255)", duration: .4 }, 0).to("#cloud1", { fill: "#101010", duration: .4 }, 0).to("#cloud2", { fill: "#191919", duration: .4 }, 0).to("#cloud3", { fill: "#2a2a2a", duration: .4 }, 0).to("#sun", { fill: "#3e3f57", duration: .8 }, 0).to("#sunburst", { scale: "0", duration: .8 }, 0); const stars = Array.from(document.getElementsByClassName("star")); stars.map((e => gsap.to(e, { duration: "random(0.4, 1.5)", repeat: -1, yoyo: !0, opacity: "random(0.2, 0.5)" }))), gsap.to(".clouds-big", { duration: 15, repeat: -1, x: -74, ease: "linear" }), gsap.to(".clouds-medium", { duration: 20, repeat: -1, x: -65, ease: "linear" }), gsap.to(".clouds-small", { duration: 25, repeat: -1, x: -71, ease: "linear" }); const switchToggle = document.getElementById("input"); switchToggle.addEventListener("change", (() => toggle())); const toggle = () => { isDay = !0 === switchToggle.checked, isDay ? ("sun" !== currentWeather.type && "clearwind" !== currentWeather.type || (document.getElementById("sunburst").style.display = "block"), toNightAnimation.reverse()) : toNightAnimation.play() };